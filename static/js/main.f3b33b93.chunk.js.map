{"version":3,"sources":["../../src/Pagination/Footer.js","../../src/BackButton/BackButton.js","../../src/Pagination/ButtonHelper.js","../../src/Pagination/ModuleHeader.js","../../src/Pagination/ModuleSearch.js","../../src/Card/Card.js","../../src/Counter/Counter.js","../../src/Loading/Loading.js","../../src/utils/arraysEqual.js","../../src/Select/Select.js","../../src/utils/index.js","App.js","index.js"],"names":["React","Component","BackButton","onReturn","className","aria-label","onClick","ButtonHelper","onAdd","onSearch","onReload","options","buttons","optionsHelper","key","type","item","i","href","id","role","TableHeader","title","ModuleSearch","isVisible","useState","text","setText","placeholder","value","onChange","e","val","Card","children","searchVisible","setSearchVisible","onSearchAction","Counter","min","max","count","countHelper","setCount","useEffect","style","width","event","reg","parseFloat","arraysEqual","a","b","isEqual","App","ReactDOM","render","document","getElementById"],"mappings":"siBAEyBA,IAAMC,UCAhB,SAASC,EAAW,GAAc,IAAZC,EAAY,EAAZA,SACnC,OACE,yBAAKC,UAAL,kCAAiDC,aAAW,eAC1D,wBAAID,UAAU,gCACZ,4BACEA,UADF,iDAEEE,QAASH,GAET,0BAAMC,UAAU,QACd,uBAAGA,UAAU,yBAEf,8BAVR,YCDF,SAASG,EAAa,GAAwC,IAAtCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAC3CC,EAAN,GACIC,EAAJ,KAcA,GAbA,GACED,OACE,4BACER,UADF,wCAEEU,IAFF,6BAGEC,KAHF,SAIET,QAASG,GAET,uBAAGL,UAAU,oBAKnB,EAAa,CACXS,KAcAF,OAbe,SAACK,EAAMC,GACpBJ,OACE,uBACEE,KADF,SAEEG,KAFF,OAGEZ,QAASU,EAHX,OAIEF,IAAG,mBAJL,EAKEV,UAAU,iBAETY,EARLH,UAyCJ,OA1BA,GACED,OACE,4BACER,UADF,wCAEEU,IAFF,2BAGEC,KAHF,SAIET,QAASI,GAET,uBAAGN,UAAU,kBAKnB,GACEQ,OACE,4BACER,UADF,qCAEEU,IAFF,0BAGEC,KAHF,SAIET,QAASE,GAET,uBAAGJ,UAAU,kBAMjB,kCACGS,EACC,kCACE,yBAAKT,UAAU,kCACb,yBAAKA,UAAU,oBACb,4BACEA,UADF,sCAEEU,IAFF,6BAGEC,KAHF,SAIET,QAASG,GAET,uBAAGL,UAAU,wBAGjB,yBAAKA,UAAL,gBAA+Be,GAA/B,gBAAkDC,KAAK,QACrD,yBAAKhB,UAAU,oBAdT,MADhB,KAoBE,yBAAKA,UAAU,WArBnB,IC5DF,SAASiB,EAAY,GAA+C,IAA7CC,EAA6C,EAA7CA,MAAOb,EAAsC,EAAtCA,SAAUD,EAA4B,EAA5BA,MAAOE,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QACvD,OACE,yBAAKP,UAAU,oCACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,iDAFnB,IAME,yBAAKA,UAAU,eACb,qBACEK,SADF,EAEED,MAFF,EAGEE,SAHF,EAIEC,QAASA,MCbnB,SAASY,EAAa,GAA0C,IAA/Bd,EAA+B,EAA/BA,SAA+B,IAArBe,iBAAqB,SAC9D,EAAwBC,mBAAxB,IAAOC,EAAP,KAAaC,EAAb,KACA,MACE,OAAO,6BAAP,MAcF,OACE,yBAAKvB,UAAU,oCACb,yBAAKA,UAAU,eACf,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BAAQA,UAAR,kBAAoCW,KAApC,SAAkDT,QAlB9C,WACZqB,MACAlB,QAiBU,0BAAML,UAAU,QACd,uBAAGA,UAAU,2BAInB,yBAAKA,UAAU,WACb,2BACEA,UADF,QAEEW,KAFF,OAGEa,YAHF,WAIEC,MAJF,EAKEC,SAvBK,SAACC,GAChB,IAAMC,EAAMD,SAAZ,MACAJ,SAwBM,yBAAKvB,UAAU,WACb,4BAAQA,UAAR,SAA2BW,KAA3B,SAAyCT,QA9BpC,WACbG,OA8BU,0BAAML,UAAU,QACd,uBAAGA,UAAU,wBCtC7B,SAAS6B,EAAK,GASX,IARDC,EAQC,EARDA,SAQC,IAPD9B,iBAOC,MAPW,UAOX,MANDkB,aAMC,MANO,GAMP,MALDnB,gBAKC,MALU,aAKV,MAJDO,gBAIC,MAJU,aAIV,MAHDD,gBAGC,MAHU,aAGV,MAFDD,aAEC,MAFO,aAEP,MADDG,eACC,MADS,KACT,EACD,EAA0Cc,oBAA1C,GAAOU,EAAP,KAAsBC,EAAtB,KACIC,EAAJ,KAMA,OALA,IACEA,EAAiB,WACfD,QAIF,yBAAKhC,UAAU,WACb,yBAAKA,UAAS,UAAYA,GACxB,yBAAKA,UAAU,aACb,qBACEkB,MADF,EAEEb,SAFF,EAGED,MAHF,EAIEE,SAJF,EAKEC,QAASA,IAEX,qBAAca,UAAd,EAAwCf,SAAUA,IAClD,yBAAKL,UAAU,oBACb,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,cACb,qBAAYD,SAAUA,KAExB,yBAAKC,UAAU,eAdrB,KAiBE,yBAAKA,UAAU,qBApBvB,MCpBF,SAASkC,EAAQ,GAA6D,eAA3DC,WAA2D,MAArD,EAAqD,MAAlDC,WAAkD,MAA5C,IAA4C,MAAlCC,aAAkC,MAA1B,EAA0B,MAAvBX,gBAAuB,MAAZ,aAAY,EAC5E,EAAgCL,mBAAhC,GAAOiB,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACJF,GAAeD,IAAnB,GACEE,OAED,CAJHC,IAmCA,OACE,yBAAKxC,UAAU,qCACb,uBAAGA,UAAU,0CACX,2BACEA,UADF,sBAEEyC,MAAO,CAAEC,MAAO,SAChB/B,KAHF,SAIEa,YAJF,SAKEC,MALF,EAMEC,SAtCkB,SAACiB,GACzB,IAAIf,EAAMe,SAAV,MACA,+BACIC,KAAJ,KACEhB,EAAMiB,WAANjB,KACW,EAAPA,KAAmBA,EAAM,EAA7B,MACEF,KAEAa,SAiCA,0BAAMvC,UAAN,wBAAwCE,QA7B3B,WACjB,IAAM0B,EAAMU,EAAZ,EACIV,GAAJ,GACEF,KAEAa,MAEAA,OAuBI,2BACE5B,KADF,SAEEc,MAFF,IAGEzB,UAAU,oCAGd,0BAAMA,UAAN,yBAAyCE,QA1B5B,WACjB,IAAM0B,EAAMU,EAAZ,EACIV,GAAJ,IACEF,KACAa,QAuBI,2BACE5B,KADF,SAEEc,MAFF,IAGEzB,UAAU,sCC7DAJ,IAAMC,UCAb,SAASiD,EAAYC,EAAGC,GACrC,GAAID,IAAJ,EAAa,OAAO,EACpB,GAAIA,SAAJ,MAAiBC,EAAW,OAAO,EACnC,GAAID,WAAaC,EAAjB,OAA2B,OAAO,EAClC,IAAK,IAAInC,EAAT,EAAgBA,EAAIkC,EAApB,WACE,IAAKE,kBAAQF,EAAD,GAAOC,EAAnBnC,IAA0B,OAAO,EAEnC,SCLyBjB,IAAMC,U,MCGjC,ICQeqD,EAVH,WACV,OACE,oCACE,kBAACpD,EAAD,CAAYuC,MAAO,IACnB,kBAACH,EAAD,MACA,kBAACL,EAAD,QCJNsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f3b33b93.chunk.js","sourcesContent":["import React from 'react'\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { actualPage: props.actualPage ? props.actualPage : 1 }\n    this.handleNextPage = this.handleNextPage.bind(this)\n    this.handlePreviousPage = this.handlePreviousPage.bind(this)\n    this.handleClickPage = this.handleClickPage.bind(this)\n  }\n\n  handleNextPage() {\n    if (this.state.actualPage <= this.props.count) {\n      const next = this.state.actualPage + 1\n      this.setState({ actualPage: next })\n      if (this.props.onPageChange) this.props.onPageChange(next)\n    }\n  }\n\n  handlePreviousPage() {\n    if (this.state.actualPage > 1) {\n      const previous = this.state.actualPage - 1\n      this.setState({ actualPage: previous })\n      if (this.props.onPageChange) this.props.onPageChange(previous)\n    }\n  }\n\n  handleClickPage(page) {\n    if (this.props.onPageChange) this.props.onPageChange(page)\n    this.setState({ actualPage: page })\n  }\n\n  render() {\n    if (this.props.isHidden) {\n      return <></>\n    }\n    const number = this.props.count\n    if (!number) return null\n    const numbers = []\n    if (number > 10) {\n      if (this.state.actualPage < 4) {\n        for (let i = 1; i < 4; ++i) {\n          numbers.push(\n            this.state.actualPage === i ? (\n              <button\n                className='pagination-link is-current button'\n                key={`pagination-${i}`}\n                aria-label={`Page ${i}`}\n                aria-current='page'\n                type='button'\n              >\n                {i}\n              </button>\n            ) : (\n              <button\n                className='pagination-link button'\n                key={`pagination-${i}`}\n                aria-label={`Goto Page ${i}`}\n                aria-current='page'\n                type='button'\n                onClick={() => this.handleClickPage(i)}\n              >\n                {i}\n              </button>\n            )\n          )\n        }\n      } else {\n        numbers.push(\n          <button\n            className='pagination-link button'\n            aria-label='Goto page 1'\n            type='button'\n            key='pagination-1'\n            onClick={() => this.handleClickPage(1)}\n          >\n            {1}\n          </button>\n        )\n      }\n      numbers.push(\n        <li>\n          <span className='pagination-ellipsis'>&hellip;</span>\n        </li>\n      )\n      const topLimit = number - 3\n      if (this.state.actualPage <= topLimit + 1) {\n        if (this.state.actualPage === 3) {\n          numbers.push(\n            <button\n              className='pagination-link button'\n              aria-label='Goto page 4'\n              type='button'\n              key='pagination-4'\n              onClick={() => this.handleClickPage(4)}\n            >\n              {4}\n            </button>\n          )\n          numbers.push(\n            <li>\n              <span className='pagination-ellipsis'>&hellip;</span>\n            </li>\n          )\n        } else if (this.state.actualPage === topLimit + 1) {\n          numbers.push(\n            <button\n              className={`pagination-link button `}\n              type='button'\n              aria-label={`Goto Page ${topLimit}`}\n              onClick={() => this.handleClickPage(topLimit)}\n            >\n              {topLimit}\n            </button>\n          )\n        } else if (this.state.actualPage > 3) {\n          const actual = this.state.actualPage\n          const past = actual - 1\n          const next = actual + 1\n          numbers.push(\n            <button\n              className='pagination-link button'\n              key={`pagination-${past}`}\n              type='button'\n              aria-label={`Goto Page ${past}`}\n              onClick={() => this.handleClickPage(past)}\n            >\n              {past}\n            </button>\n          )\n          numbers.push(\n            <button\n              className='pagination-link button is-current'\n              aria-label={`Page ${actual}`}\n              type='button'\n              key={`pagination-${actual}`}\n            >\n              {actual}\n            </button>\n          )\n          numbers.push(\n            <button\n              className='pagination-link button'\n              aria-label={`Goto Page ${next}`}\n              key={`pagination-${next}`}\n              type='button'\n              onClick={() => this.handleClickPage(next)}\n            >\n              {next}\n            </button>\n          )\n          numbers.push(\n            <li>\n              <span className='pagination-ellipsis'>&hellip;</span>\n            </li>\n          )\n        }\n      }\n\n      if (this.state.actualPage > topLimit) {\n        for (let i = number - 2; i <= number; ++i) {\n          numbers.push(\n            this.state.actualPage === i ? (\n              <button\n                className='pagination-link is-current button'\n                key={`pagination-${i}`}\n                type='button'\n                aria-label={`Page ${i}`}\n                aria-current='page'\n              >\n                {i}\n              </button>\n            ) : (\n              <button\n                className='pagination-link button'\n                key={`pagination-${i}`}\n                aria-label={`Page ${i}`}\n                type='button'\n                aria-current='page'\n                onClick={() => this.handleClickPage(i)}\n              >\n                {i}\n              </button>\n            )\n          )\n        }\n      } else {\n        numbers.push(\n          <button\n            className='pagination-link button'\n            aria-label={`Goto page ${number}`}\n            key={`pagination-${number}`}\n            type='button'\n            onClick={() => this.handleClickPage(number)}\n          >\n            {number}\n          </button>\n        )\n      }\n    } else {\n      numbers.push(\n        this.state.actualPage === 1 ? (\n          <button\n            className='pagination-link is-current button'\n            type='button'\n            key='pagination-1'\n            aria-label='Page 1'\n            aria-current='page'\n          >\n            {1}\n          </button>\n        ) : (\n          <button\n            className='pagination-link button'\n            type='button'\n            aria-label='Goto page 1'\n            onClick={() => this.handleClickPage(1)}\n          >\n            {1}\n          </button>\n        )\n      )\n      for (let i = 2; i < number; ++i) {\n        numbers.push(\n          this.state.actualPage === i ? (\n            <button\n              className='pagination-link is-current  button'\n              type='button'\n              key={`pagination-${i}`}\n              aria-label={`Page ${i} `}\n              aria-current='page'\n            >\n              {i}\n            </button>\n          ) : (\n            <button\n              className='pagination-link button'\n              type='button'\n              key={`pagination-${i}`}\n              aria-label={`Go to page ${i} `}\n              onClick={() => this.handleClickPage(i)}\n            >\n              {i}\n            </button>\n          )\n        )\n      }\n      if (number !== 1)\n        numbers.push(\n          this.state.actualPage === number ? (\n            <button\n              className='pagination-link is-current button'\n              type='button'\n              key={`pagination-${number}`}\n              aria-label={`Page ${number} `}\n              aria-current='page'\n            >\n              {number}\n            </button>\n          ) : (\n            <button\n              className='pagination-link button'\n              type='button'\n              key={`pagination-${number}`}\n              aria-label={`Go to Page ${number} `}\n              onClick={() => this.handleClickPage(number)}\n            >\n              {number}\n            </button>\n          )\n        )\n    }\n    return (\n      <div\n        className='pagination is-left'\n        role='navigation'\n        aria-label='pagination'\n      >\n        <button\n          className='pagination-previous button'\n          type='button'\n          onClick={this.handlePreviousPage}\n          disabled={this.state.actualPage > 1 ? undefined : true}\n        >\n          Anterior\n        </button>\n        <button\n          className='pagination-next button'\n          type='button'\n          onClick={this.handleNextPage}\n          disabled={this.state.actualPage < number ? undefined : true}\n        >\n          Siguiente\n        </button>\n        <ul className='pagination-list'>{numbers}</ul>\n      </div>\n    )\n  }\n}\n\nexport default Pagination\n","import React from 'react'\n\nexport default function BackButton({ onReturn }) {\n  return (\n    <nav className='breadcrumb  ml-0 pl-0 mb-0 pb-0' aria-label='breadcrumbs'>\n      <li className='tree-li  ml-0 pl-0 mb-0 pb-0'>\n        <button\n          className='button  ml-0 pl-0 mb-0 pb-0 is-ghost is-size-6'\n          onClick={onReturn}\n        >\n          <span className='mr-1'>\n            <i className='fas fa-chevron-left' />\n          </span>\n          <span>Atras</span>\n        </button>\n      </li>\n    </nav>\n  )\n}\n","import React, { Fragment } from 'react'\n\nfunction ButtonHelper({ onAdd, onSearch, onReload, options }) {\n  const buttons = []\n  let optionsHelper = null\n  if (onSearch) {\n    buttons.push(\n      <button\n        className='button is-ghost px-1 has-text-success'\n        key='table-button-search-action'\n        type='button'\n        onClick={onSearch}\n      >\n        <i className='fas fa-search' />\n      </button>\n    )\n  }\n\n  if (options) {\n    optionsHelper = []\n    const mapper = (item, i) => {\n      optionsHelper.push(\n        <a\n          type='button'\n          href='#foo'\n          onClick={item.action}\n          key={`dropdown-button-${i}`}\n          className='dropdown-item'\n        >\n          {item.name}\n        </a>\n      )\n    }\n    options.map(mapper)\n  }\n\n  if (onReload) {\n    buttons.push(\n      <button\n        className='button is-ghost px-1 has-text-primary'\n        key='table-button-sync-action'\n        type='button'\n        onClick={onReload}\n      >\n        <i className='fas fa-sync' />\n      </button>\n    )\n  }\n\n  if (onAdd) {\n    buttons.push(\n      <button\n        className='button is-ghost px-1 has-text-info'\n        key='table-button-add-action'\n        type='button'\n        onClick={onAdd}\n      >\n        <i className='fas fa-plus' />\n      </button>\n    )\n  }\n\n  return (\n    <Fragment>\n      {optionsHelper ? (\n        <>\n          <div className='dropdown is-hoverable is-right'>\n            <div className='dropdown-trigger'>\n              <button\n                className='button is-ghost px-1 has-text-black'\n                key='table-button-search-action'\n                type='button'\n                onClick={onSearch}\n              >\n                <i className='fas fa-ellipsis-h' />\n              </button>\n            </div>\n            <div className='dropdown-menu' id='dropdown-menu' role='menu'>\n              <div className='dropdown-content'>{optionsHelper}</div>\n            </div>\n          </div>\n        </>\n      ) : null}\n      <div className='buttons'>{buttons}</div>\n    </Fragment>\n  )\n}\nexport default ButtonHelper\n","import React from 'react'\nimport ButtonHelper from './ButtonHelper'\nfunction TableHeader({ title, onSearch, onAdd, onReload, options }) {\n  return (\n    <div className='level py-0 px-1 m-0 table-header'>\n      <div className='level-left'>\n        <div className='has-text-weight-bold has-text-black is-size-6'>\n          {title}\n        </div>\n      </div>\n      <div className='level-right'>\n        <ButtonHelper\n          onSearch={onSearch}\n          onAdd={onAdd}\n          onReload={onReload}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default TableHeader\n","import React, { Fragment, useState } from 'react'\n\nfunction ModuleSearch({ options, onSearch, isVisible = false }) {\n  const [text, setText] = useState('')\n  if (!isVisible) {\n    return <Fragment />\n  }\n  const reset = () => {\n    setText('')\n    onSearch('')\n  }\n  const search = () => {\n    onSearch(text)\n  }\n  const onChange = (e) => {\n    const val = e.target.value\n    setText(val)\n  }\n\n  return (\n    <div className='level py-3 px-1 m-0 table-header'>\n      <div className='level-left' />\n      <div className='level-right'>\n        <div className='field has-addons'>\n          <div className='control'>\n            <button className='button is-ghost' type='button' onClick={reset}>\n              <span className='icon'>\n                <i className='far fa-times-circle' />\n              </span>\n            </button>\n          </div>\n          <div className='control'>\n            <input\n              className='input'\n              type='text'\n              placeholder='Busqueda'\n              value={text}\n              onChange={onChange}\n            />\n          </div>\n          <div className='control'>\n            <button className='button' type='button' onClick={search}>\n              <span className='icon'>\n                <i className='fas fa-search' />\n              </span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ModuleSearch\n","import React, { useState } from 'react'\nimport BackButton from '../BackButton'\nimport ModuleHeader from '../Pagination/ModuleHeader'\nimport ModuleSearch from '../Pagination/ModuleSearch'\n\nfunction Card({\n  children,\n  className = 'is-full',\n  title = '',\n  onReturn = () => {},\n  onReload = () => {},\n  onSearch = () => {},\n  onAdd = () => {},\n  options = null\n}) {\n  const [searchVisible, setSearchVisible] = useState(false)\n  let onSearchAction = null\n  if (onSearch) {\n    onSearchAction = () => {\n      setSearchVisible(true)\n    }\n  }\n  return (\n    <div className='columns'>\n      <div className={`column ${className}`}>\n        <div className='card px-5'>\n          <ModuleHeader\n            title={title}\n            onSearch={onSearchAction}\n            onAdd={onAdd}\n            onReload={onReload}\n            options={options}\n          />\n          <ModuleSearch isVisible={searchVisible} onSearch={onSearch} />\n          <div className='card-header px-0'>\n            <div className='level card-header-title  px-0 py-0'>\n              <div className='level-left'>\n                <BackButton onReturn={onReturn} />\n              </div>\n              <div className='level-right'>{options}</div>\n            </div>\n          </div>\n          <div className='card-content px-0'>{children}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React, { useEffect, useState } from 'react'\n\nfunction Counter({ min = 0, max = 10000000, count = 0, onChange = () => {} }) {\n  const [countHelper, setCount] = useState(min)\n\n  useEffect(() => {\n    if (countHelper && count !== countHelper) {\n      setCount(count)\n    }\n  }, [count])\n\n  const handleManualWrite = (event) => {\n    let val = event.target.value\n    const reg = /[0-9]?[0-9]?(\\.[0-9][0-9]?)?/\n    if (reg.test(val)) {\n      val = parseFloat(val)\n      if (val >= this.min && val < this.max) {\n        onChange(val)\n\n        setCount(val)\n      }\n    }\n  }\n  const handleLess = () => {\n    const val = countHelper - 1\n    if (val >= min) {\n      onChange(val)\n\n      setCount(val)\n    } else {\n      setCount(min)\n    }\n  }\n  const handlePlus = () => {\n    const val = countHelper + 1\n    if (val <= max) {\n      onChange(val)\n      setCount(val)\n    }\n  }\n  return (\n    <div className='field has-addons has-addons-right'>\n      <p className='control has-icons-left has-icons-right'>\n        <input\n          className='input counter-input'\n          style={{ width: '150px' }}\n          type='number'\n          placeholder='numero'\n          value={countHelper}\n          onChange={handleManualWrite}\n        />\n\n        <span className='icon is-small is-left' onClick={handleLess}>\n          <input\n            type='button'\n            value='-'\n            className='counter-button button is-ghost'\n          />\n        </span>\n        <span className='icon is-small is-right' onClick={handlePlus}>\n          <input\n            type='button'\n            value='+'\n            className='counter-button button is-ghost'\n          />\n        </span>\n      </p>\n    </div>\n  )\n}\n\nexport default Counter\n","import React from 'react'\n\nclass Loading extends React.Component {\n  constructor(props) {\n    super(props)\n    this.time = this.props.time ? this.props.time : 15000\n    this.state = {\n      isReload: false,\n      loaded: this.props.loaded\n    }\n    this.loadError = this.loadError.bind(this)\n    this.reload = this.reload.bind(this)\n    this.className = this.props.className ? this.props.className : 'barloader'\n    this.logo = this.props.logo ? this.props.logo : ''\n  }\n\n  interval = null\n\n  componentDidMount() {\n    this.interval = setInterval(this.loadError, this.time)\n  }\n\n  componentDidUpdate() {\n    if (this.props.loaded !== this.state.loaded) {\n      const callback = () => {\n        if (this.props.loaded) {\n          clearInterval(this.interval)\n        }\n      }\n      this.setState(\n        {\n          loaded: this.props.loaded\n        },\n        callback\n      )\n    }\n  }\n\n  loadError() {\n    if (!this.props.loaded) {\n      this.setState({\n        isReload: true\n      })\n    }\n    clearInterval(this.interval)\n  }\n\n  reload() {\n    if (this.props.reload) {\n      this.props.reload()\n    }\n    this.interval = setInterval(this.loadError, this.time)\n    this.setState({\n      isReload: false\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      let isFull = true\n      if (this.props.isSmall) {\n        isFull = false\n      }\n      const content = this.state.isReload ? (\n        <>\n          <div className={`is-vcentered ${this.className}`}>\n            <div className='container'>\n              <div className='columns is-centered'>\n                <div className='column is-centered box  px-6 is-full'>\n                  <div className='form'>\n                    <div className='field'>\n                      <div className='columns is-justify-content-center'>\n                        <div className='column is-3'>\n                          <figure className='image '>\n                            <img src={this.logo} alt='logo' />\n                          </figure>\n                        </div>\n                      </div>\n                    </div>\n                    <div className='field py-3' />\n                    <div className='field is-grouped is-grouped-centered'>\n                      <p className='control'>\n                        <button\n                          className='button'\n                          type='button'\n                          onClick={this.reload}\n                        >\n                          <span>\n                            <i className='fas fa-sync' />\n                          </span>\n                          <span className='pl-3'>Reintentar</span>\n                        </button>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={`${this.className}  is-vcentered`}>\n          <div className='container'>\n            <progress className='progress is-small is-link' max='100'>\n              %\n            </progress>\n          </div>\n        </div>\n      )\n      return (\n        <div className={` ${isFull ? 'hero is-fullheight' : ''} `}>\n          {content}\n        </div>\n      )\n    } else {\n      return <></>\n    }\n  }\n}\n\nexport default Loading\n","import { isEqual } from 'lodash'\n\nexport default function arraysEqual(a, b) {\n  if (a === b) return true\n  if (a == null || b == null) return false\n  if (a.length !== b.length) return false\n  for (let i = 0; i < a.length; ++i) {\n    if (!isEqual(a[i], b[i])) return false\n  }\n  return true\n}\n","import React from 'react'\nimport t from 'typy'\nimport { arraysEqual } from '../utils'\n\nclass SelectLayout extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      location: -1,\n      value: '',\n      selected: 0\n    }\n    this.handleSelectOption = this.handleSelectOption.bind(this)\n    this.getSelection = this.getSelection.bind(this)\n    this.handleSelectedChange = this.handleSelectedChange.bind(this)\n    this.handleTextChange = this.handleTextChange.bind(this)\n  }\n\n  componentDidMount() {\n    this.loadData()\n  }\n\n  handleSelectedChange(data = this.state.data) {\n    const size = data.length\n    for (let i = 0; i < size; ++i) {\n      const ele = data[i]\n      if (ele.value === this.props.selected) {\n        return i\n      }\n    }\n  }\n\n  wrapData() {\n    const { options, value = 'value', label = 'label' } = this.props\n    const itemOptions = []\n    const mapper = (item) => {\n      const valueItem = this.getItemData(item, value)\n      const labelItem = this.getItemData(item, label)\n      itemOptions.push({\n        label: labelItem,\n        value: valueItem\n      })\n    }\n    options.map(mapper)\n    return itemOptions\n  }\n\n  componentDidUpdate() {\n    const newData = this.wrapData()\n    if (!arraysEqual(newData, this.state.data)) {\n      this.loadData(newData)\n    }\n  }\n\n  loadData(itemOptions = this.wrapData()) {\n    const { placeholder } = this.props\n    if (this.props.onSearch) {\n      this.setState({\n        data: itemOptions,\n        location: 0\n      })\n      return\n    }\n    if (this.props.selected) {\n      const location = this.handleSelectedChange(itemOptions)\n      if (location) {\n        this.setState({\n          data: itemOptions,\n          value: itemOptions[location].label,\n          location: location,\n          selected: this.props.selected\n        })\n        return\n      }\n    }\n    if (placeholder) {\n      this.setState({\n        data: itemOptions,\n        value: placeholder\n      })\n    } else if (itemOptions.length > 0) {\n      if (this.state.location >= 0) {\n        this.setState({\n          data: itemOptions,\n          value: itemOptions[this.state.location].label\n        })\n      } else {\n        this.setState({\n          data: itemOptions,\n          value: itemOptions[0].label,\n          location: 0\n        })\n      }\n    } else {\n      this.setState({\n        data: itemOptions,\n        value: ''\n      })\n    }\n  }\n\n  getItemData(item, col) {\n    const result = t(item, col).safeObject\n    if (!result) {\n      return col.default ? col.default : ''\n    }\n    return result\n  }\n\n  handleTextChange(e) {\n    if (this.props.onSearch) {\n      const value = e.target.value\n      this.props.onSearch(value)\n      this.setState({\n        value: value\n      })\n    }\n  }\n\n  handleSelectOption(location) {\n    const item = this.state.data[location]\n    if (this.props.onSelect) {\n      this.props.onSelect(item.value, location)\n    }\n    this.setState({\n      selected: item.value,\n      value: item.label,\n      location: location\n    })\n  }\n\n  getSelection() {\n    return ''\n  }\n\n  render() {\n    const { disabled } = this.props\n    if (disabled) {\n      return (\n        <input\n          className='input'\n          type='text'\n          value={this.state.value}\n          disabled\n          readOnly\n        />\n      )\n    }\n    return (\n      <>\n        <div className='select is-full'>\n          <div className='dropdown is-hoverable'>\n            <div className='dropdown-trigger'>\n              <input\n                className='input'\n                type='text'\n                value={this.state.value}\n                onChange={this.handleTextChange}\n              />\n            </div>\n            <div className='dropdown-menu' role='menu'>\n              <div className='dropdown-content'>\n                {this.state.data.map((item, i) => (\n                  <a\n                    className={`dropdown-item ${\n                      `${i}` === `${this.state.location}` ? 'is-active' : ''\n                    }`}\n                    onClick={() => {\n                      this.handleSelectOption(i)\n                    }}\n                    key={`item-label-${item.value}-${i}`}\n                  >\n                    {item.label}\n                  </a>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default SelectLayout\n","import arraysEqual from './arraysEqual'\nimport camelCase from './camelCase'\nimport getFileExtenstion from './getFileExtenstion'\nimport makeRandom from './makeRandom'\nimport numberWithCommas from './numberWithCommas'\nimport createPdf from './createPdf'\n\nconst elements = {\n  createPdf,\n  arraysEqual,\n  numberWithCommas,\n  makeRandom,\n  getFileExtenstion,\n  camelCase\n}\n\nexport default elements\n\nexport {\n  createPdf,\n  arraysEqual,\n  numberWithCommas,\n  makeRandom,\n  getFileExtenstion,\n  camelCase\n}\n","import React from 'react'\n\nimport { BackButton, Counter, Card } from 'finalsa-react-components'\nimport 'finalsa-react-components/dist/index.css'\n\nconst App = () => {\n  return (\n    <>\n      <BackButton count={1} />\n      <Counter/>\n      <Card></Card>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}